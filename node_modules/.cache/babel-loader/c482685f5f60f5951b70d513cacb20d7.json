{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst punycode = require(\"punycode\");\n\nconst regexes = require(\"./lib/regexes.js\");\n\nconst mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, {\n  useSTD3ASCIIRules\n}) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const target = mappingTable[mid];\n\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        const newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, {\n  useSTD3ASCIIRules,\n  processingOption\n}) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n\n    switch (status) {\n      case \"disallowed\":\n        hasError = true;\n        processed += ch;\n        break;\n\n      case \"ignored\":\n        break;\n\n      case \"mapped\":\n        processed += mapping;\n        break;\n\n      case \"deviation\":\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n\n        break;\n\n      case \"valid\":\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, {\n  checkHyphens,\n  checkBidi,\n  checkJoiners,\n  processingOption,\n  useSTD3ASCIIRules\n}) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n\n    if (processingOption === \"transitional\" && status !== \"valid\" || processingOption === \"nontransitional\" && status !== \"valid\" && status !== \"deviation\") {\n      return false;\n    }\n  } // https://tools.ietf.org/html/rfc5892#appendix-A\n\n\n  if (checkJoiners) {\n    let last = 0;\n\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n\n        return false;\n      }\n    }\n  } // https://tools.ietf.org/html/rfc5893#section-2\n\n\n  if (checkBidi) {\n    let rtl; // 1\n\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const {\n    processingOption\n  } = options; // 1. Map.\n\n  let {\n    string,\n    error\n  } = mapChars(domainName, options); // 2. Normalize.\n\n  string = string.normalize(\"NFC\"); // 3. Break.\n\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels); // 4. Convert/Validate.\n\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n\n      curProcessing = \"nontransitional\";\n    } // No need to validate if we already know there is an error.\n\n\n    if (error) {\n      continue;\n    }\n\n    const validation = validateLabel(label, Object.assign({}, options, {\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    }));\n\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false\n} = {}) {\n  const result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};","map":{"version":3,"names":["punycode","require","regexes","mappingTable","containsNonASCII","str","test","findStatus","val","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","startsWith","newStatus","slice","mapChars","domainName","processingOption","hasError","processed","ch","status","mapping","codePointAt","string","error","validateLabel","label","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","Array","from","endsWith","includes","combiningMarks","last","i","entries","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","err","bidiDomain","processing","options","split","isBidi","origLabel","curProcessing","validation","Object","assign","toASCII","verifyDNSLength","RangeError","result","l","encode","e","total","toUnicode","module","exports"],"sources":["D:/web/Vue/shop/node_modules/terser/node_modules/tr46/index.js"],"sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        const newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus, ...target.slice(2)];\n      }\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case \"disallowed\":\n        hasError = true;\n        processed += ch;\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += mapping;\n        break;\n      case \"deviation\":\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case \"valid\":\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== \"valid\") ||\n        (processingOption === \"nontransitional\" &&\n         status !== \"valid\" && status !== \"deviation\")) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, Object.assign({}, options, {\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    }));\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false\n} = {}) {\n  const result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}