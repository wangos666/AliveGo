{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\n\nconst util = require(\"./util\"); // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\n\n\nconst REGEX_NEWLINE = /(\\r?\\n)/; // Newline character code for charCodeAt() comparisons\n\nconst NEWLINE_CODE = 10; // Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\n\nconst isSourceNode = \"$$$isSourceNode$$$\";\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\n\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n\n\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode(); // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n\n    const shiftNextLine = function () {\n      const lineContents = getNextLine(); // The last line of a file might not have a newline.\n\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;\n      }\n    }; // We need to remember the position of \"remainingLines\"\n\n\n    let lastGeneratedLine = 1,\n        lastGeneratedColumn = 0; // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n\n    let lastMapping = null;\n    let nextLine;\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0; // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code); // No more remaining code, continue\n\n          lastMapping = mapping;\n          return;\n        }\n      } // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n\n\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n\n      lastMapping = mapping;\n    }, this); // We have processed all mappings.\n\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      } // and add the remaining lines without any mapping\n\n\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    } // Copy sourcesContent into SourceNode\n\n\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));\n      }\n    }\n  }\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n\n\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n\n    return this;\n  }\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n\n\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n    }\n\n    return this;\n  }\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n\n\n  walk(aFn) {\n    let chunk;\n\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, {\n          source: this.source,\n          line: this.line,\n          column: this.column,\n          name: this.name\n        });\n      }\n    }\n  }\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n\n\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n\n    if (len > 0) {\n      newChildren = [];\n\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n\n    return this;\n  }\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n\n\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n\n    return this;\n  }\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n\n\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n\n\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n\n\n  toString() {\n    let str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n\n\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n\n      if (original.source !== null && original.line !== null && original.column !== null) {\n        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0; // Mappings end at eol\n\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n    return {\n      code: generated.code,\n      map\n    };\n  }\n\n}\n\nexports.SourceNode = SourceNode;","map":{"version":3,"names":["SourceMapGenerator","require","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","constructor","aLine","aColumn","aSource","aChunks","aName","children","sourceContents","line","column","source","name","add","fromStringWithSourceMap","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","remainingLinesIndex","shiftNextLine","lineContents","getNextLine","newLine","length","undefined","lastGeneratedLine","lastGeneratedColumn","lastMapping","nextLine","eachMapping","mapping","generatedLine","addMappingWithCode","code","substr","generatedColumn","splice","join","sources","forEach","sourceFile","content","sourceContentFor","setSourceContent","originalLine","originalColumn","aChunk","Array","isArray","chunk","push","TypeError","prepend","i","unshift","walk","aFn","len","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","replace","aSourceFile","aSourceContent","toSetString","walkSourceContents","Object","keys","fromSetString","toString","str","toStringWithSourceMap","aArgs","generated","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceContent","exports"],"sources":["D:/web/Vue/shop/node_modules/terser/node_modules/source-map/lib/source-node.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}